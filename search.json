[{"path":"https://horankev.github.io/sfislands/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 sfislands authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"in-brief","dir":"Articles","previous_headings":"","what":"In brief","title":"Guide to sfislands package","text":"goal sfislands make easier deal geographic datasets contain islands. using tidy framework spirit Josiah Parry’s sfdep package. “literal” islands situation discontiguous geographical units present. situation can lead two issues. Firstly, unaddressed, presence islands exclaves can make certain types contiguity-based modelling impossible. Secondly, just two areas separated , say, body water, necessarily mean considered independent . package offers solutions allow inclusion exclusion units within uncomplicated workflow.","code":""},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"installation","dir":"Articles","previous_headings":"In brief","what":"Installation","title":"Guide to sfislands package","text":"can install development version sfislands GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"horankev/sfislands\")"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"summary-of-features","dir":"Articles","previous_headings":"In brief","what":"Summary of features","title":"Guide to sfislands package","text":"initial setting neighbourhood structures can frustrating people eager get started fitting spatial models. especially presence discontiguities within geographical dataset means , even set neighbours list, model still run without awkward data manipulations. aid setting neighbourhood structures, particularly islands involved, package function quickly map neighbourhood structure visual inspection. can also used examine output sfdep neighbour functions. maps can used check structure makes sense, given researcher’s knowledge geography study area. neighbours assigned appropriate, wish add additional ones, functions allow done straightforward openly reportable way. appropriate neighbourhood structure place, different types statistical tests models can performed. sfdep contains functionality perform test, output sfislands can used functions. contiguity outputs sfislands can directly used fit different types (multilevel) ()CAR models using, example, mgcv, brms, stan INLA packages. mgcv particular, predictions models can quite tedious extract visualise. sfislands can streamline workflow human side. Furthermore, function draw maps predictions quick inspection.","code":""},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"functions-overview","dir":"Articles","previous_headings":"","what":"Functions overview","title":"Guide to sfislands package","text":"following framework within sfislands functions used:","code":""},{"path":[]},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"step-2-create-model","dir":"Articles","previous_headings":"Functions overview","what":"Step 2: Create model","title":"Guide to sfislands package","text":"Use output st_bridges() data neighbourhood inputs model using, example, mgcv, brms inla.","code":""},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"step-3-examine-output-post-functions","dir":"Articles","previous_headings":"Functions overview","what":"Step 3: Examine output (“post functions”)","title":"Guide to sfislands package","text":", look functions detail show operation.","code":""},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"pre-functions","dir":"Articles","previous_headings":"","what":"Pre-functions","title":"Guide to sfislands package","text":"sfdep offers excellent tools building neighbourhood structures, among things. range functions depending want define neighbour mean. However, often preparing areal spatial data, presence uncontiguous areas (islands exclaves) can create difficulties. might also want account hidden contiguities allowing bridges, tunnels etc. render two uncontiguous areas neighbours. sfislands provides functions make task easier. also provides number helper functions examine neighbourhood structures use models workflow streamlined human side.","code":""},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"mainland-france-guerry-dataset","dir":"Articles","previous_headings":"Pre-functions","what":"Mainland France (guerry dataset)","title":"Guide to sfislands package","text":"sfislands intended used alongside sfdep package. principal functions sfdep areal data demonstrated vignette using guerry (“Essay Moral Statistics France”) dataset. data applies geographical area mainland France shown :  French example, st_islands function st_bridges() produces exactly neighbourhood structure (based contiguity) sfdep::st_contiguity(). can seen piping neighbourhood outputs st_islands function st_quickmap_nb() gives visual representation structure map. function works neighbourhoods constructed package long list matrix form. st_quickmap_nb(), neighbourhoods within sf dataframe column called “nb”. st_bridges() automatically whereas “nb” column needs added using sfdep functions.","code":"g <- guerry |>    st_as_sf()  ggplot(g) +    geom_sf() +    theme_void()"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"sfislandsst_bridges","dir":"Articles","previous_headings":"Pre-functions > Mainland France (guerry dataset)","what":"sfislands::st_bridges()","title":"Guide to sfislands package","text":"st_bridges() contiguities , department considered neighbour another touches least one point…  … sfdep:","code":"g |> st_bridges(\"department\") |>    st_quickmap_nb()"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"sfdepst_contiguity","dir":"Articles","previous_headings":"Pre-functions > Mainland France (guerry dataset)","what":"sfdep::st_contiguity()","title":"Guide to sfislands package","text":"maps produced using ggplot2, characteristics can edited using normal ggplot2 syntax (see 1, ). convenience, simple arguments also provided (see 2, ) changing core characteristics map simple way:  sfdep offers number different types neighbourhood structure, selection shown . can conveniently visualised using st_quickmap_nb() function:","code":"g |> mutate(nb = st_contiguity(geometry)) |>    st_quickmap_nb() ggarrange(      g |> mutate(nb = st_contiguity(geometry)) |>      st_quickmap_nb() +     geom_sf(data = g |> group_by(region) |> summarise(),              linewidth = 0.5, colour = \"black\", fill = NA) +      labs(title = \"st_quickmap_nb()\",          subtitle = \"1. using ggplot syntax\") +      theme_minimal() +     theme(panel.background = element_rect(fill = \"aquamarine3\", color = \"black\"),           axis.text = element_blank()),      g |> mutate(nb = st_contiguity(geometry)) |>      st_quickmap_nb(linkcol = \"orange\",                          bordercol = \"white\",                          pointcol = \"yellow\",                          fillcol = \"black\",                          linksize = 0.4,                          bordersize = 0.3,                          pointsize = 0.8,                         title = \"st_quickmap_nb()\",                         subtitle = \"2. using simplified arguments\"),      ncol=2 )"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"sfdepst_dist_band","dir":"Articles","previous_headings":"Pre-functions > Mainland France (guerry dataset)","what":"sfdep::st_dist_band()","title":"Guide to sfislands package","text":"areas within certain distance considered neighbours:","code":"g |> mutate(nb = st_geometry(g) |>                st_dist_band(upper = 150000)) |>    st_quickmap_nb()"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"sfdepst_knn","dir":"Articles","previous_headings":"Pre-functions > Mainland France (guerry dataset)","what":"sfdep::st_knn()","title":"Guide to sfislands package","text":"k-nearest-neighbours (, 1) area considered neighbours:","code":"g |> mutate(nb = st_geometry(g) |>                st_knn(1, symmetric = TRUE)) |>    st_quickmap_nb()"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"sfdepst_block_nb","dir":"Articles","previous_headings":"Pre-functions > Mainland France (guerry dataset)","what":"sfdep::st_block_nb()","title":"Guide to sfislands package","text":"areas within chosen block considered neighbours:","code":"id <- g$code_dept regime <- g$region g |>    mutate(     nb = st_block_nb(regime, id)   ) |>    st_quickmap_nb()"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"sfdepst_lag_cumul","dir":"Articles","previous_headings":"Pre-functions > Mainland France (guerry dataset)","what":"sfdep::st_lag_cumul()","title":"Guide to sfislands package","text":"Cumulative higher orders contiguity also including neighbours--neighbours:  However, sfdep functions rely contiguity run difficulties consider following geography:","code":"g |> mutate(nb = st_contiguity(geometry) |> st_nb_lag_cumul(2)) |>    st_quickmap_nb()"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"england-scotland-wales","dir":"Articles","previous_headings":"Pre-functions","what":"England, Scotland & Wales","title":"Guide to sfislands package","text":"context constituencies England, Scotland Wales, problems due presence islands feature contiguity graph unless attempt pick islands set buffer around . process , however, cumbersome can induce contiguities intended. One potential remedy entirely exclude islands study, another construct contiguity structure according desired criteria set islands contiguous closest k constituencies. st_bridges() can things. map question: island constituencies north around Scotland also less obvious ones Wales England. constituencies non-contiguous outlined red :  incorporate use st_bridges(). can set remove_islands TRUE decide simply exclude islands, set link_k_islands closest k constituencies islands want bridge.","code":""},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"remove-islands","dir":"Articles","previous_headings":"Pre-functions > England, Scotland & Wales","what":"Remove islands","title":"Guide to sfislands package","text":", argument remove_islands set TRUE, simply remove islands dataset entirely.","code":"nbsf <- st_bridges(df = uk_election,                   geom_col_name = \"constituency_name\",                   remove_islands = T) st_quickmap_nb(nbsf,                      pointsize=0.05,                     title = \"st_bridges() contiguities\",                     subtitle = \"no island constituencies\\n(islands which remain are part of a contiguous constituency)\")"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"connect-islands","dir":"Articles","previous_headings":"Pre-functions > England, Scotland & Wales","what":"Connect islands","title":"Guide to sfislands package","text":"Alternatively, can join islands nearest, say, 2 constituencies. st_bridges() default returns original dataframe augmented “nb” column contains contiguities list form.  neighbourhood structure created can either named list (default) named matrix. Different modelling packages different requirements information presented. Furthermore, can choose add_to_dataframe TRUE (default) return dataframe column called nb contains named list matrix. FALSE, neighbourhood structure returned options can seen unexecuted code : neighbourhoods list form: “nb” column can also matrix, st_quickmap_nb() still return map:  matrix neighbourhood structure now following form:","code":"nbsf <- st_bridges(df = uk_election,                   geom_col_name = \"constituency_name\",                   link_islands_k = 2) st_quickmap_nb(nbsf,                      pointsize=0.05,                      title = \"st_bridges() contiguities\",                       subtitle = \"islands linked to k=2 nearest constituencies\") nbsf <- st_bridges(df = sf_dataframe,                   geom_col_name = \"the column containing the names of the contiguous areas\",                   remove_islands = T/F,                   link_islands_k = 1...n,                   nb_structure = \"list\"/\"matrix\",                   add_to_dataframe = T/F,                   title = \"title\",                   subtitle = \"subtitle\") head(nbsf$nb) #> $Aberavon #> [1]  80 157 371 419 451 547 #>  #> $Aberconwy #> [1]  12 141 181 630 #>  #> $`Aberdeen North` #> [1]   4 239 595 #>  #> $`Aberdeen South` #> [1]   3 595 #>  #> $`Airdrie and Shotts` #> [1] 142 156 309 327 332 369 #>  #> $Aldershot #> [1]  70 395 517 544 nbsf <- st_bridges(df = uk_election,                   geom_col_name = \"constituency_name\",                   remove_islands = F,                   link_islands_k = 2,                   nb_structure = \"matrix\",                   add_to_dataframe = T) st_quickmap_nb(nbsf,                      pointsize=0.05) nbsf$nb[1:10,1:10] #>                          [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> Aberavon                    0    0    0    0    0    0    0    0    0     0 #> Aberconwy                   0    0    0    0    0    0    0    0    0     0 #> Aberdeen North              0    0    0    1    0    0    0    0    0     0 #> Aberdeen South              0    0    1    0    0    0    0    0    0     0 #> Airdrie and Shotts          0    0    0    0    0    0    0    0    0     0 #> Aldershot                   0    0    0    0    0    0    0    0    0     0 #> Aldridge-Brownhills         0    0    0    0    0    0    0    0    0     0 #> Altrincham and Sale West    0    0    0    0    0    0    0    0    0     0 #> Alyn and Deeside            0    0    0    0    0    0    0    0    0     0 #> Amber Valley                0    0    0    0    0    0    0    0    0     0"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"editing-the-contiguities","dir":"Articles","previous_headings":"Pre-functions","what":"Editing the contiguities","title":"Guide to sfislands package","text":"also functions manually changing results neighbourhood construction. may case want add additional links remove others. example, may aware local knowledge connectivities represented mere contiguity polygons. presence tunnels bridges across body water example situation. functions st_manual_join_nb() st_manual_cut_nb() .","code":""},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"sfislandst_check_islands","dir":"Articles","previous_headings":"Pre-functions > Editing the contiguities","what":"sfisland::st_check_islands()","title":"Guide to sfislands package","text":"make use functions easier intuitive, function st_check_islands() shows us contiguities set islands st_bridges(): Sometimes, case, certain islands specified k neighbours. due need symmetry structure.","code":"nbsf |> st_check_islands() #>            island_names island_num nb_num                              nb_names #> 1        Isle Of Wight         292    378                       New Forest East #> 2        Isle Of Wight         292    379                       New Forest West #> 3 Na h-Eileanan An Iar         370    101 Caithness, Sutherland and Easter Ross #> 4 Na h-Eileanan An Iar         370    423                   Orkney and Shetland #> 5 Na h-Eileanan An Iar         370    461               Ross, Skye and Lochaber #> 6  Orkney and Shetland         423    101 Caithness, Sutherland and Easter Ross #> 7  Orkney and Shetland         423    370                  Na h-Eileanan An Iar #> 8             Ynys Mon         630      2                             Aberconwy #> 9             Ynys Mon         630     12                                 Arfon"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"st_manual_join_nb-st_manual_cut_nb","dir":"Articles","previous_headings":"Pre-functions > Editing the contiguities","what":"st_manual_join_nb() / st_manual_cut_nb()","title":"Guide to sfislands package","text":"Let us say want change . example, cut tie Isle Wight New Forest East (using numbers) also Ynys Mon Arfon (using names): extra contiguities can difficult distinguish, extreme case shown demonstrate st_manual_join_nb(). Gower South Wales joined St Ives Cornwall mapped:  manual functions can also, course, used edit previously discussed neighbourhood structures created sfdep. example, looking just Scotland can use sfdep::st_nb_lag_cumul() get first second degree neighbours:  include island constituencies. can chose include first using st_bridges() k=2…  … examining connections made islands: can add island connections output sfdep::st_nb_lag_cumul():","code":"nbsf |>    st_manual_cut_nb(292,378) |>   st_manual_cut_nb(\"Ynys Mon\",\"Arfon\") |>   st_check_islands() #>            island_names island_num nb_num                              nb_names #> 1        Isle Of Wight         292    379                       New Forest West #> 2 Na h-Eileanan An Iar         370    101 Caithness, Sutherland and Easter Ross #> 3 Na h-Eileanan An Iar         370    423                   Orkney and Shetland #> 4 Na h-Eileanan An Iar         370    461               Ross, Skye and Lochaber #> 5  Orkney and Shetland         423    101 Caithness, Sutherland and Easter Ross #> 6  Orkney and Shetland         423    370                  Na h-Eileanan An Iar #> 7             Ynys Mon         630      2                             Aberconwy st_bridges(df = uk_election|> filter(region %in% c(\"Wales\",\"South West\")),            geom_col_name = \"constituency_name\",            link_islands_k = 2 )  |>    st_manual_join_nb(\"Gower\",\"St Ives\") |>   st_quickmap_nb(title = \"st_bridges contiguities: Wales & South West\",                       subtitle = \"with additional st_manual_join_nb() for Gower and St Ives\") +    geom_sf_label(data=uk_election|> filter(constituency_name %in% c(\"Gower\",\"St Ives\")),                 aes(label=constituency_name),nudge_x = -30000) uk_election |>    filter(region == \"Scotland\") |>    mutate(nb = st_contiguity(uk_election$geometry[uk_election$region == \"Scotland\"]) |>             st_nb_lag_cumul(2)) |>     st_quickmap_nb() uk_election |>    filter(region == \"Scotland\") |>    st_bridges(geom_col_name = \"constituency_name\",              link_islands_k = 2) |>    st_quickmap_nb() uk_election |>    filter(region == \"Scotland\") |>    st_bridges(geom_col_name = \"constituency_name\",              link_islands_k = 2) |>    st_check_islands() #>            island_names island_num nb_num                              nb_names #> 1 Na h-Eileanan An Iar          47      9 Caithness, Sutherland and Easter Ross #> 2 Na h-Eileanan An Iar          47     51                   Orkney and Shetland #> 3 Na h-Eileanan An Iar          47     55               Ross, Skye and Lochaber #> 4  Orkney and Shetland          51      9 Caithness, Sutherland and Easter Ross #> 5  Orkney and Shetland          51     47                  Na h-Eileanan An Iar uk_election |>    filter(region == \"Scotland\") |>    mutate(nb = st_contiguity(uk_election$geometry[uk_election$region == \"Scotland\"]) |>             st_nb_lag_cumul(2)) |>    st_manual_join_nb(47,9) |>   st_manual_join_nb(47,51) |>   st_manual_join_nb(47,55) |>   st_manual_join_nb(51,9) |>   st_manual_join_nb(51,47) |>   st_quickmap_nb()"},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"modelling-post-functions","dir":"Articles","previous_headings":"","what":"Modelling & post-functions","title":"Guide to sfislands package","text":"set neighbourhood structure embedded named list matrix within original sf dataset column nb, functions make easy quickly perform ICAR smoothing, augment original dataframe predictions, visualise . example, can use mgcv package generate Markov Random Field ICAR smooth poor health across study area. done quickly using st_bridges() prepare data, putting inside mgcv GAM formulation, piping st_augment() st_quickmap_preds() functions.  equivalent model, time smoothing degree_educated, can fitted using brms. package requires neighbourhoods matrix form:  complex models random effects multiple smooths also possible mgcv st_augment() st_quickmap_preds() functions can handle label columns maps generated appropriately. shown model swing 2019 election:  see estimates returned:","code":"prep_data <- st_bridges(uk_election, \"constituency_name\")  gam(health_not_good ~ s(constituency_name, bs='mrf', xt=list(nb=prep_data$nb), k=100),         data=prep_data, method=\"REML\") |>   st_augment(prep_data) |>   st_quickmap_preds() #> [[1]] prep_data2 <- st_bridges(uk_election, \"constituency_name\", nb_structure = \"matrix\")  fit <- brm(degree_educated ~ car(W, gr=constituency_name, type=\"icar\"),            data = prep_data2, data2 = list(W=prep_data2$nb),            family = gaussian(),file = \"brmsfit_degree\")  prep_data2$brmsfit <- predict(fit,prep_data2)[,1]  ggplot(prep_data2)+geom_sf(aes(fill=brmsfit), linewidth=0.1) +   scale_fill_gradient2(low=\"firebrick4\",mid=\"white\",high=\"darkblue\",midpoint = 0) +   coord_sf(datum=NA) +   theme_minimal() +   theme_bw() prep_data3 <- st_bridges(uk_election, \"constituency_name\") # decide upon the contiguities and add them to the df  model <- gam(con_swing ~                 s(region, bs=\"re\") + # region level random intercept                s(county, bs=\"re\") + # county level random intercept                s(county, degree_educated, bs=\"re\") + # county level random coefficient                s(constituency_name, bs='mrf',                   xt=list(nb=prep_data3$nb),k=10) + # ICAR constituency ICAR varying coefficients                s(constituency_name, by=white, bs='mrf',                   xt=list(nb=prep_data3$nb),k=10), # ICAR constituency ICAR varying coefficients              data=prep_data3, method=\"REML\") |>    st_augment(prep_data3) |> # pipe into function to get estimates   st_quickmap_preds() # pipe into this for visualisation  ggarrange(plotlist = model, legend = \"none\", nrow=1) gam(con_swing ~                 s(region, bs=\"re\") + # region level random intercept                s(county, bs=\"re\") + # county level random intercept                s(county, degree_educated, bs=\"re\") + # county level random coefficient                s(constituency_name, bs='mrf',                   xt=list(nb=prep_data3$nb),k=10) + # ICAR constituency ICAR varying coefficients                s(constituency_name, by=white, bs='mrf',                   xt=list(nb=prep_data3$nb),k=10), # ICAR constituency ICAR varying coefficients              data=prep_data3, method=\"REML\") |>    st_augment(prep_data3) |>    head() #> Simple feature collection with 6 features and 20 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 264110.4 ymin: 148666.1 xmax: 488768.5 ymax: 812377.5 #> Projected CRS: OSGB36 / British National Grid #>   degree_educated health_not_good      white  con_swing population     region #> 1     -1.21794372       2.4694480  0.6393329  8.5917223      66133      Wales #> 2      0.04609836       0.5666903  0.6561204  2.2040312      56415      Wales #> 3      0.26593462      -0.8699365  0.1441816  7.1285493      99654   Scotland #> 4      1.62837520      -1.7731408  0.3038995  2.9732599      93197   Scotland #> 5     -1.35386780       0.8155333  0.6963927 -0.2362672      85845   Scotland #> 6     -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 South East #>           county  constituency_name  country                           nb #> 1 West Glamorgan           Aberavon    Wales  80, 157, 371, 419, 451, 547 #> 2          Clwyd          Aberconwy    Wales                 12, 141, 181 #> 3       Scotland     Aberdeen North Scotland                  4, 239, 595 #> 4       Scotland     Aberdeen South Scotland                       3, 595 #> 5       Scotland Airdrie and Shotts Scotland 142, 156, 309, 327, 332, 369 #> 6      Hampshire          Aldershot  England            70, 395, 517, 544 #>   random.effect.region random.effect.county #> 1           0.07736634           -0.0889861 #> 2           0.07736634           -0.1062061 #> 3          -1.69257542           -0.2986088 #> 4          -1.69257542           -0.2986088 #> 5          -1.69257542           -0.2986088 #> 6          -0.60617303            0.2472990 #>   random.effect.degree_educated|county mrf.smooth.constituency_name #> 1                           -3.0504238                   0.08001029 #> 2                           -1.6077523                   0.10070833 #> 3                           -0.1165337                  -0.30112582 #> 4                           -0.1165337                  -0.30111510 #> 5                           -0.1165337                  -0.34218741 #> 6                           -2.0453936                   0.01698329 #>   mrf.smooth.white|constituency_name se.random.effect.region #> 1                          0.9971918               0.5881627 #> 2                          1.2785329               0.5881627 #> 3                          1.2800763               0.6985112 #> 4                          1.2799615               0.6985112 #> 5                          1.7736548               0.6985112 #> 6                         -0.1353957               0.5113682 #>   se.random.effect.county se.random.effect.degree_educated|county #> 1               0.4400444                               1.0549478 #> 2               0.4432314                               1.7152822 #> 3               0.4500975                               0.2933430 #> 4               0.4500975                               0.2933430 #> 5               0.4500975                               0.2933430 #> 6               0.3825063                               0.6696364 #>   se.mrf.smooth.constituency_name se.mrf.smooth.white|constituency_name #> 1                       0.3101948                             0.7308175 #> 2                       0.2039813                             0.4377840 #> 3                       0.5769227                             1.0462122 #> 4                       0.5769674                             1.0463117 #> 5                       0.4265664                             0.7384490 #> 6                       0.1762707                             0.2423523 #>                         geometry #> 1 POLYGON ((290786.3 202886.7... #> 2 POLYGON ((283209.3 381440.5... #> 3 MULTIPOLYGON (((395379.7 80... #> 4 POLYGON ((396214 805849.7, ... #> 5 POLYGON ((290854.4 662154.9... #> 6 POLYGON ((485408.1 159918.6..."},{"path":"https://horankev.github.io/sfislands/articles/article1.html","id":"back-to-the-guerry-dataset","dir":"Articles","previous_headings":"Modelling & post-functions","what":"Back to the guerry dataset","title":"Guide to sfislands package","text":"Returning dataset used sfdep, can easily create smooth suicides France 1830 follows. Since islands, use st_bridges() function like sfdep:st_contiguity() except automatically adds neighbourhood ‘nb’ column dataframe.  fit complex mixed model:","code":"prep_data4 <- g |> st_bridges(\"department\")  mod4 <- gam(suicides ~ s(department, bs='mrf', xt=list(nb=prep_data4$nb), k=80),             data=prep_data4, method=\"REML\") |>   st_augment(prep_data4) |>   st_quickmap_preds() ggarrange(plotlist=mod4) prep_data5 <- g |>    st_bridges(\"department\")  model5 <- gam(donations ~                  s(region, bs=\"re\") +                  s(region, crime_prop, bs=\"re\") + # county level random coefficient                 s(department, bs='mrf',                    xt=list(nb=prep_data5$nb),k=20) + # ICAR constituency level varying coefficents                 s(department, by=infants, bs='mrf',                    xt=list(nb=prep_data5$nb),k=20), # ICAR constituency level varying coefficents               data=prep_data5, method=\"REML\") |>    st_augment(prep_data5) |> # pipe into function to get estimates   st_quickmap_preds() # pipe into this for visualisation  ggarrange(plotlist = model5, legend = \"none\", nrow = 1)"},{"path":"https://horankev.github.io/sfislands/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Horan. Author, maintainer, copyright holder. Katarina Domijan. Author, thesis advisor. Chris Brunsdon. Author, thesis advisor.","code":""},{"path":"https://horankev.github.io/sfislands/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Horan K, Domijan K, Brunsdon C (2025). sfislands: Streamlines Process Fitting Areal Spatial Models. R package version 1.1.0, https://horankev.github.io/sfislands/, https://github.com/horankev/sfislands.","code":"@Manual{,   title = {sfislands: Streamlines the Process of Fitting Areal Spatial Models},   author = {Kevin Horan and Katarina Domijan and Chris Brunsdon},   year = {2025},   note = {R package version 1.1.0, https://horankev.github.io/sfislands/},   url = {https://github.com/horankev/sfislands}, }"},{"path":"https://horankev.github.io/sfislands/index.html","id":"sfislands-","dir":"","previous_headings":"","what":"Streamlines the Process of Fitting Areal Spatial Models","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"goal sfislands make easier deal geographic datasets contain islands. using tidy framework spirit Josiah Parry’s sfdep package. islands traditional land water geographic definition, situation discontiguous geographical units present. situation can lead two issues. Firstly, unaddressed, presence islands exclaves can make certain types contiguity-based modelling impossible. Secondly, just two areas separated , say, body water, necessarily mean considered independent . package offers solutions allow inclusion exclusion units within uncomplicated workflow. pre-print paper discussing package available .","code":""},{"path":"https://horankev.github.io/sfislands/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"Install released version CRAN: can install development version sfislands GitHub :","code":"install.packages(\"sfislands\") # install.packages(\"devtools\") devtools::install_github(\"horankev/sfislands\")"},{"path":"https://horankev.github.io/sfislands/index.html","id":"summary-of-features","dir":"","previous_headings":"","what":"Summary of features","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"initial setting-neighbourhood structures can frustrating people eager get started fitting spatial models. especially presence discontiguities within geographical dataset means , even set neighbours list, model still run without awkward data manipulations. aid setting neighbourhood structures, particularly islands involved, package function quickly map neighbourhood structure visual inspection. can also used examine output sfdep neighbour functions. maps can used check structure makes sense, given researcher’s knowledge geography study area. units assigned neighbours inappropriately, wish add additional connections, functions allow done straightforward openly reportable way. appropriate neighbourhood structure place, different types statistical tests models can performed. sfdep contains functionality perform tests, output sfislands can used functions. contiguity outputs sfislands can directly used fit different types (multilevel) ()CAR models using, example, mgcv, brms, stan INLA packages. mgcv particular, predictions models can quite tedious extract visualise. sfislands can streamline workflow human side. Furthermore, function draw maps predictions quick inspection.","code":""},{"path":"https://horankev.github.io/sfislands/index.html","id":"functions-overview","dir":"","previous_headings":"","what":"Functions overview","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"following brief explanations functions contained sfislands package workflow within used. first group can seen pre-functions, designed create neighbourhood structure suitable certain types models. model fit (using mgcv case), post-functions can used extract predictions.","code":""},{"path":[]},{"path":"https://horankev.github.io/sfislands/index.html","id":"step-2-create-model","dir":"","previous_headings":"Functions overview","what":"Step 2: Create model","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"Use output st_bridges() data neighbourhood inputs model using, example, mgcv, brms inla.","code":""},{"path":[]},{"path":"https://horankev.github.io/sfislands/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"dataset uk_elections, provided package, used following demonstrations. sf dataset geometries 632 Westminster parliamentary constituencies England, Scotland Wales 2019 general election. constituency, contains socio-economic data 2011 census. also shows Butler swing 2017 2019 elections, measure change voter allegiance favour Conservative Party Labour Party.","code":""},{"path":"https://horankev.github.io/sfislands/index.html","id":"pre-functions-creating-desired-adjacency-structure","dir":"","previous_headings":"Workflow","what":"Pre-functions: Creating desired adjacency structure","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"demonstrate st_bridges() function preparing adjacency matrix, focus Scotland. nation highest number islands. function, default arguments, returns dataframe additional column named nb. column named neighbourhood list class nb. default neighbourhood structure computes : constituencies islands, first-order queen contiguity. constituency considered neighbour shares least vortex. islands, contiguities assigned two nearest constituencies island. number can altered using link_islands_k argument. new dataframe following form (column named nb containing neighbours list): can inspect (openly report) additional contiguities added standard queen contiguity structure using function st_check_islands(). overall contiguity structure can visualised using function st_quickmap_nb(), whose output shown left.  However, often case island unit (case, constituency) fact multipolygon islands. make clearer, argument concavehull = TRUE can chosen. green boundaries (shown right) around constituency reference purpose influence assignment contiguities. show group islands considered one constituency islands. Furthermore, argument nodes = \"numeric\" represents centroids unit index number instead geometric point. can useful editing adjacencies, particularly researcher familiar names individual spatial units.","code":"scotland_df <- uk_election |> filter(country == \"Scotland\") nbsf <- st_bridges(df = scotland_df,                    row_identifier = \"constituency_name\",                    link_islands_k = 2) head(nbsf) #> Simple feature collection with 6 features and 10 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 92527.68 ymin: 571251.1 xmax: 397261.7 ymax: 812377.5 #> Projected CRS: OSGB36 / British National Grid #>   degree_educated health_not_good     white  con_swing population   region #> 1       0.2659346      -0.8699365 0.1441816  7.1285493      99654 Scotland #> 2       1.6283752      -1.7731408 0.3038995  2.9732599      93197 Scotland #> 3      -1.3538678       0.8155333 0.6963927 -0.2362672      85845 Scotland #> 4      -0.6852759      -0.6765349 0.7250742  1.7350840      86004 Scotland #> 5       0.2535023      -0.3624242 0.7174423  3.9062703      88166 Scotland #> 6      -0.6898382       0.6590625 0.7272781  4.4404142      93308 Scotland #>     county        constituency_name  country                     nb #> 1 Scotland           Aberdeen North Scotland              2, 36, 58 #> 2 Scotland           Aberdeen South Scotland                  1, 58 #> 3 Scotland       Airdrie and Shotts Scotland 11, 12, 41, 42, 43, 46 #> 4 Scotland                    Angus Scotland         15, 16, 54, 58 #> 5 Scotland          Argyll and Bute Scotland         54, 55, 57, 59 #> 6 Scotland Ayr, Carrick and Cumnock Scotland         10, 13, 14, 39 #>                         geometry #> 1 MULTIPOLYGON (((395379.7 80... #> 2 POLYGON ((396214 805849.7, ... #> 3 POLYGON ((290854.4 662154.9... #> 4 POLYGON ((374164.5 762668.6... #> 5 MULTIPOLYGON (((139257.4 64... #> 6 MULTIPOLYGON (((246939 6250... st_check_islands(nbsf) #>           island_names island_num nb_num                              nb_names #> 1 Na h-Eileanan An Iar         47      9 Caithness, Sutherland and Easter Ross #> 2 Na h-Eileanan An Iar         47     51                   Orkney and Shetland #> 3 Na h-Eileanan An Iar         47     55               Ross, Skye and Lochaber #> 4  Orkney and Shetland         51      9 Caithness, Sutherland and Easter Ross #> 5  Orkney and Shetland         51     47                  Na h-Eileanan An Iar ggarrange(   st_quickmap_nb(nbsf),      st_quickmap_nb(nbsf,                  concavehull = TRUE,                  nodes = \"numeric\",                  numericsize = 3.5),      ncol = 2 )"},{"path":"https://horankev.github.io/sfislands/index.html","id":"editing-contiguities","dir":"","previous_headings":"Workflow > Pre-functions: Creating desired adjacency structure","what":"Editing contiguities","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"researcher can now use domain knowledge particular hypothesis edit contiguities. instance, may happy connection 47 (Na h-Eileanan Iar) 51 (Orkney Shetland) wish remove . might instead feel important 47 5 considered neighbours. can easily achieved, shown , using st_manual_cut_nb() st_manual_join_nb() functions. spatial units whose relationships wish change can referenced name index number. results changes visualised map form shown :  process can iterated happy structure conforms hypothesis connectivity within study area.","code":"nbsf <- st_bridges(df = uk_election |> filter(country == \"Scotland\"),                    row_identifier = \"constituency_name\",                    link_islands_k = 2) |>    st_force_cut_nb(\"Na h-Eileanan An Iar\", \"Orkney and Shetland\") |>    st_force_join_nb(47, 5) ggarrange(   st_quickmap_nb(nbsf,                  concavehull = TRUE,                  nodes = \"numeric\",                  numericsize = 3.5),      st_quickmap_nb(nbsf),      ncol = 2 )"},{"path":"https://horankev.github.io/sfislands/index.html","id":"modelling--post-functions","dir":"","previous_headings":"Workflow","what":"Modelling & post-functions","title":"Streamlines the Process of Fitting Areal Spatial Models","text":"set neighbourhood structure embedded named list matrix within original sf dataset column named nb, workflow generate visualise predictions model (case using mgcv) straightforward consists 3-4 lines code. example, can use mgcv package generate quite complicated model various random intercepts slopes region county level, additionally, different Markov Random Field ICAR smooths constituency level. done quickly using st_bridges() prepare data, putting inside mgcv::gam() formulation, piping st_augment() function. gives following output, spatially varying predictions standard errors added extra columns final geometry column: predictions can quickly visualised using st_quickmap_preds(). function generates list ggplots, can conveniently visualised using ggarrange() function ggpubr package.  emphasise simplicity process, modified version following sequence commands generate series plots spatially varying elements model defined mgcv: also possible conduct kind augmenting plotting models generated using lme4 nlme packages. information vignettes containing detailed examples available .","code":"prep_data <- st_bridges(uk_election, \"constituency_name\") # decide upon the contiguities and add them to the df  model1 <- gam(con_swing ~                 s(region, bs=\"re\") + # region level random intercept                s(county, bs=\"re\") + # county level random intercept                s(county, degree_educated, bs=\"re\") + # county level random coefficient                s(constituency_name, bs='mrf',                   xt=list(nb=prep_data$nb),k=10) + # ICAR constituency ICAR varying coefficients                s(constituency_name, by=white, bs='mrf',                   xt=list(nb=prep_data$nb),k=10), # ICAR constituency ICAR varying coefficients              data=prep_data, method=\"REML\") |>  # pipe into function to get estimates   st_augment(prep_data)  head(model1) #> Simple feature collection with 6 features and 20 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 264110.4 ymin: 148666.1 xmax: 488768.5 ymax: 812377.5 #> Projected CRS: OSGB36 / British National Grid #>   degree_educated health_not_good      white  con_swing population     region #> 1     -1.21794372       2.4694480  0.6393329  8.5917223      66133      Wales #> 2      0.04609836       0.5666903  0.6561204  2.2040312      56415      Wales #> 3      0.26593462      -0.8699365  0.1441816  7.1285493      99654   Scotland #> 4      1.62837520      -1.7731408  0.3038995  2.9732599      93197   Scotland #> 5     -1.35386780       0.8155333  0.6963927 -0.2362672      85845   Scotland #> 6     -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 South East #>           county  constituency_name  country                           nb #> 1 West Glamorgan           Aberavon    Wales  80, 157, 371, 419, 451, 547 #> 2          Clwyd          Aberconwy    Wales                 12, 141, 181 #> 3       Scotland     Aberdeen North Scotland                  4, 239, 595 #> 4       Scotland     Aberdeen South Scotland                       3, 595 #> 5       Scotland Airdrie and Shotts Scotland 142, 156, 309, 327, 332, 369 #> 6      Hampshire          Aldershot  England            70, 395, 517, 544 #>   random.effect.region random.effect.county #> 1           0.07736634           -0.0889861 #> 2           0.07736634           -0.1062061 #> 3          -1.69257542           -0.2986088 #> 4          -1.69257542           -0.2986088 #> 5          -1.69257542           -0.2986088 #> 6          -0.60617303            0.2472990 #>   random.effect.degree_educated|county mrf.smooth.constituency_name #> 1                           -3.0504238                   0.08001029 #> 2                           -1.6077523                   0.10070833 #> 3                           -0.1165337                  -0.30112582 #> 4                           -0.1165337                  -0.30111510 #> 5                           -0.1165337                  -0.34218741 #> 6                           -2.0453936                   0.01698329 #>   mrf.smooth.white|constituency_name se.random.effect.region #> 1                          0.9971918               0.5881627 #> 2                          1.2785329               0.5881627 #> 3                          1.2800763               0.6985112 #> 4                          1.2799615               0.6985112 #> 5                          1.7736548               0.6985112 #> 6                         -0.1353957               0.5113682 #>   se.random.effect.county se.random.effect.degree_educated|county #> 1               0.4400444                               1.0549478 #> 2               0.4432314                               1.7152822 #> 3               0.4500975                               0.2933430 #> 4               0.4500975                               0.2933430 #> 5               0.4500975                               0.2933430 #> 6               0.3825063                               0.6696364 #>   se.mrf.smooth.constituency_name se.mrf.smooth.white|constituency_name #> 1                       0.3101948                             0.7308175 #> 2                       0.2039813                             0.4377840 #> 3                       0.5769227                             1.0462122 #> 4                       0.5769674                             1.0463117 #> 5                       0.4265664                             0.7384490 #> 6                       0.1762707                             0.2423523 #>                         geometry #> 1 POLYGON ((290786.3 202886.7... #> 2 POLYGON ((283209.3 381440.5... #> 3 MULTIPOLYGON (((395379.7 80... #> 4 POLYGON ((396214 805849.7, ... #> 5 POLYGON ((290854.4 662154.9... #> 6 POLYGON ((485408.1 159918.6... plots <- st_quickmap_preds(model1) ggarrange(plotlist = plots, legend = \"none\", nrow=1) prep_data <- st_bridges(...)  gam(..., data = prep_data) |>    st_augment() |>    st_quickmap_preds()"},{"path":"https://horankev.github.io/sfislands/reference/st_augment.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment dataframe with predictions of model — st_augment","title":"Augment dataframe with predictions of model — st_augment","text":"Augment dataframe predictions model","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_augment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment dataframe with predictions of model — st_augment","text":"","code":"st_augment(model, df)"},{"path":"https://horankev.github.io/sfislands/reference/st_augment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment dataframe with predictions of model — st_augment","text":"model `mgcv`, `lme4` `nlme` model. df `sf` data frame augmented model predictions.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_augment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment dataframe with predictions of model — st_augment","text":"augmented `sf` data frame extra columns showing estimates random effects model.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_augment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment dataframe with predictions of model — st_augment","text":"","code":"prepdata <- st_bridges(uk_election,\"constituency_name\") mgcv::gam(health_not_good ~   s(constituency_name, bs='mrf', xt=list(nb=prepdata$nb), k=100),   data=prepdata, method=\"REML\") |> st_augment(uk_election) #> Simple feature collection with 632 features and 10 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5513.182 ymin: 7057.949 xmax: 655655.4 ymax: 1218620 #> Projected CRS: OSGB36 / British National Grid #> First 10 features: #>    degree_educated health_not_good      white  con_swing population #> 1      -1.21794372       2.4694480  0.6393329  8.5917223      66133 #> 2       0.04609836       0.5666903  0.6561204  2.2040312      56415 #> 3       0.26593462      -0.8699365  0.1441816  7.1285493      99654 #> 4       1.62837520      -1.7731408  0.3038995  2.9732599      93197 #> 5      -1.35386780       0.8155333  0.6963927 -0.2362672      85845 #> 6      -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 #> 7      -0.74760203       0.8047040  0.3409127  7.4304029      76974 #> 8       1.63438559      -1.1613230  0.1605045 -0.4813182      96591 #> 9      -0.65926781      -0.1982048  0.6815335  5.6002269      82505 #> 10     -0.96445730       0.9975218  0.6930268  9.4698002      87883 #>           region             county        constituency_name  mrf.smooth #> 1          Wales     West Glamorgan                 Aberavon  1.82293254 #> 2          Wales              Clwyd                Aberconwy  0.48444472 #> 3       Scotland           Scotland           Aberdeen North -1.58021815 #> 4       Scotland           Scotland           Aberdeen South -1.70435245 #> 5       Scotland           Scotland       Airdrie and Shotts  0.07320101 #> 6     South East          Hampshire                Aldershot -1.51043755 #> 7  West Midlands      West Midlands      Aldridge-Brownhills  0.63368847 #> 8     North West Greater Manchester Altrincham and Sale West  0.03473148 #> 9          Wales              Clwyd         Alyn and Deeside  0.14602595 #> 10 East Midlands         Derbyshire             Amber Valley  0.52999669 #>    se.mrf.smooth                       geometry #> 1      0.1944985 POLYGON ((290786.3 202886.7... #> 2      0.2178170 POLYGON ((283209.3 381440.5... #> 3      0.2909148 MULTIPOLYGON (((395379.7 80... #> 4      0.3990368 POLYGON ((396214 805849.7, ... #> 5      0.1670717 POLYGON ((290854.4 662154.9... #> 6      0.1735666 POLYGON ((485408.1 159918.6... #> 7      0.1068069 POLYGON ((406519.5 305056.1... #> 8      0.1541860 POLYGON ((379104.1 393145.7... #> 9      0.1869323 POLYGON ((331643.4 372873.5... #> 10     0.1284806 POLYGON ((444868.5 353960.2..."},{"path":"https://horankev.github.io/sfislands/reference/st_bridges.html","id":null,"dir":"Reference","previous_headings":"","what":"Create first-order queen contiguity neighbourhood structure with additional connections when islands are present, ensuring that there are no unconnected units — st_bridges","title":"Create first-order queen contiguity neighbourhood structure with additional connections when islands are present, ensuring that there are no unconnected units — st_bridges","text":"Create first-order queen contiguity neighbourhood structure additional connections islands present, ensuring unconnected units","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_bridges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create first-order queen contiguity neighbourhood structure with additional connections when islands are present, ensuring that there are no unconnected units — st_bridges","text":"","code":"st_bridges(   df,   row_identifier,   remove_islands = FALSE,   link_islands_k = 1,   nb_structure = \"list\",   add_to_dataframe = TRUE,   threshold = 1.001,   geom_col_name = lifecycle::deprecated() )"},{"path":"https://horankev.github.io/sfislands/reference/st_bridges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create first-order queen contiguity neighbourhood structure with additional connections when islands are present, ensuring that there are no unconnected units — st_bridges","text":"df `sf` `sfc` object. row_identifier name column `df` containing names (unique identifiers) row. remove_islands default `FALSE`. Whether omit islands contiguity construction. link_islands_k integer, k. number nearest units island connected. nb_structure default `\"list\"`. Can also `\"matrix\"`. format return named contiguity structure. add_to_dataframe default `TRUE`. Whether augment existing df contiguity output `\"nb\"` column. `FALSE` returns contiguity structure. threshold default 1.001. factor change size buffer automatically generated around islands account imprecisions may arise sf::st_buffer() functionality. can increased connections islands occurring expected. geom_col_name name column `df` containing names (unique identifiers) row. argument now deprecated new \"row_identifier\" argument replaces functionality.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_bridges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create first-order queen contiguity neighbourhood structure with additional connections when islands are present, ensuring that there are no unconnected units — st_bridges","text":"Either named neighbourhood list matrix, `sf` dataframe list matrix included `\"nb\"` column.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_bridges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create first-order queen contiguity neighbourhood structure with additional connections when islands are present, ensuring that there are no unconnected units — st_bridges","text":"","code":"st_bridges(uk_election,\"constituency_name\") #> Simple feature collection with 632 features and 9 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5513.182 ymin: 7057.949 xmax: 655655.4 ymax: 1218620 #> Projected CRS: OSGB36 / British National Grid #> First 10 features: #>    degree_educated health_not_good      white  con_swing population #> 1      -1.21794372       2.4694480  0.6393329  8.5917223      66133 #> 2       0.04609836       0.5666903  0.6561204  2.2040312      56415 #> 3       0.26593462      -0.8699365  0.1441816  7.1285493      99654 #> 4       1.62837520      -1.7731408  0.3038995  2.9732599      93197 #> 5      -1.35386780       0.8155333  0.6963927 -0.2362672      85845 #> 6      -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 #> 7      -0.74760203       0.8047040  0.3409127  7.4304029      76974 #> 8       1.63438559      -1.1613230  0.1605045 -0.4813182      96591 #> 9      -0.65926781      -0.1982048  0.6815335  5.6002269      82505 #> 10     -0.96445730       0.9975218  0.6930268  9.4698002      87883 #>           region             county        constituency_name #> 1          Wales     West Glamorgan                 Aberavon #> 2          Wales              Clwyd                Aberconwy #> 3       Scotland           Scotland           Aberdeen North #> 4       Scotland           Scotland           Aberdeen South #> 5       Scotland           Scotland       Airdrie and Shotts #> 6     South East          Hampshire                Aldershot #> 7  West Midlands      West Midlands      Aldridge-Brownhills #> 8     North West Greater Manchester Altrincham and Sale West #> 9          Wales              Clwyd         Alyn and Deeside #> 10 East Midlands         Derbyshire             Amber Valley #>                                       nb                       geometry #> 1            80, 157, 371, 419, 451, 547 POLYGON ((290786.3 202886.7... #> 2                           12, 141, 181 POLYGON ((283209.3 381440.5... #> 3                            4, 239, 595 MULTIPOLYGON (((395379.7 80... #> 4                                 3, 595 POLYGON ((396214 805849.7, ... #> 5           142, 156, 309, 327, 332, 369 POLYGON ((290854.4 662154.9... #> 6                      70, 395, 517, 544 POLYGON ((485408.1 159918.6... #> 7  49, 106, 325, 509, 546, 549, 577, 578 POLYGON ((406519.5 305056.1... #> 8                540, 550, 583, 584, 628 POLYGON ((379104.1 393145.7... #> 9           136, 140, 141, 162, 205, 624 POLYGON ((331643.4 372873.5... #> 10             15, 61, 93, 165, 212, 352 POLYGON ((444868.5 353960.2..."},{"path":"https://horankev.github.io/sfislands/reference/st_check_islands.html","id":null,"dir":"Reference","previous_headings":"","what":"Examine contiguity actions which have been performed on islands by `st_bridges()` — st_check_islands","title":"Examine contiguity actions which have been performed on islands by `st_bridges()` — st_check_islands","text":"Examine contiguity actions performed islands `st_bridges()`","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_check_islands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examine contiguity actions which have been performed on islands by `st_bridges()` — st_check_islands","text":"","code":"st_check_islands(data)"},{"path":"https://horankev.github.io/sfislands/reference/st_check_islands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examine contiguity actions which have been performed on islands by `st_bridges()` — st_check_islands","text":"data `sf` dataframe neighbourhood column called `\"nb\"` output `st_bridges()`.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_check_islands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examine contiguity actions which have been performed on islands by `st_bridges()` — st_check_islands","text":"dataframe reporting non-contiguous connections made `st_bridges()`.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_check_islands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Examine contiguity actions which have been performed on islands by `st_bridges()` — st_check_islands","text":"","code":"st_bridges(uk_election,\"constituency_name\") |> st_check_islands() #>           island_names island_num nb_num                              nb_names #> 1        Isle Of Wight        292    379                       New Forest West #> 2 Na h-Eileanan An Iar        370    461               Ross, Skye and Lochaber #> 3  Orkney and Shetland        423    101 Caithness, Sutherland and Easter Ross #> 4             Ynys Mon        630     12                                 Arfon"},{"path":"https://horankev.github.io/sfislands/reference/st_force_cut_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove contiguity between pairs of areas — st_force_cut_nb","title":"Remove contiguity between pairs of areas — st_force_cut_nb","text":"Remove contiguity pairs areas","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_force_cut_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove contiguity between pairs of areas — st_force_cut_nb","text":"","code":"st_force_cut_nb(nb, x = NULL, y = NULL, xy_df = NULL)"},{"path":"https://horankev.github.io/sfislands/reference/st_force_cut_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove contiguity between pairs of areas — st_force_cut_nb","text":"nb neighbourhood `\"list\"` `\"matrix\"`, `sf` dataframe neighbourhood column called `\"nb\"`. x name number first area (optional `xy_df` provided). y name number second area (optional `xy_df` provided). xy_df (optional) dataframe two columns: `x` `y`, containing names numbers areas cut.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_force_cut_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove contiguity between pairs of areas — st_force_cut_nb","text":"amended neighbourhood `\"list\"`, `\"matrix\"`, `sf` dataframe neighbourhood column called `\"nb\"`.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_force_cut_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove contiguity between pairs of areas — st_force_cut_nb","text":"","code":"# For individual x and y st_bridges(uk_election,\"constituency_name\") |> st_force_cut_nb(x = \"Llanelli\", y = \"Swansea West\") #> Simple feature collection with 632 features and 9 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5513.182 ymin: 7057.949 xmax: 655655.4 ymax: 1218620 #> Projected CRS: OSGB36 / British National Grid #> First 10 features: #>    degree_educated health_not_good      white  con_swing population #> 1      -1.21794372       2.4694480  0.6393329  8.5917223      66133 #> 2       0.04609836       0.5666903  0.6561204  2.2040312      56415 #> 3       0.26593462      -0.8699365  0.1441816  7.1285493      99654 #> 4       1.62837520      -1.7731408  0.3038995  2.9732599      93197 #> 5      -1.35386780       0.8155333  0.6963927 -0.2362672      85845 #> 6      -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 #> 7      -0.74760203       0.8047040  0.3409127  7.4304029      76974 #> 8       1.63438559      -1.1613230  0.1605045 -0.4813182      96591 #> 9      -0.65926781      -0.1982048  0.6815335  5.6002269      82505 #> 10     -0.96445730       0.9975218  0.6930268  9.4698002      87883 #>           region             county        constituency_name #> 1          Wales     West Glamorgan                 Aberavon #> 2          Wales              Clwyd                Aberconwy #> 3       Scotland           Scotland           Aberdeen North #> 4       Scotland           Scotland           Aberdeen South #> 5       Scotland           Scotland       Airdrie and Shotts #> 6     South East          Hampshire                Aldershot #> 7  West Midlands      West Midlands      Aldridge-Brownhills #> 8     North West Greater Manchester Altrincham and Sale West #> 9          Wales              Clwyd         Alyn and Deeside #> 10 East Midlands         Derbyshire             Amber Valley #>                                       nb                       geometry #> 1            80, 157, 371, 419, 451, 547 POLYGON ((290786.3 202886.7... #> 2                           12, 141, 181 POLYGON ((283209.3 381440.5... #> 3                            4, 239, 595 MULTIPOLYGON (((395379.7 80... #> 4                                 3, 595 POLYGON ((396214 805849.7, ... #> 5           142, 156, 309, 327, 332, 369 POLYGON ((290854.4 662154.9... #> 6                      70, 395, 517, 544 POLYGON ((485408.1 159918.6... #> 7  49, 106, 325, 509, 546, 549, 577, 578 POLYGON ((406519.5 305056.1... #> 8                540, 550, 583, 584, 628 POLYGON ((379104.1 393145.7... #> 9           136, 140, 141, 162, 205, 624 POLYGON ((331643.4 372873.5... #> 10             15, 61, 93, 165, 212, 352 POLYGON ((444868.5 353960.2...  # For multiple x and y pairs st_bridges(uk_election,\"constituency_name\") |> st_force_cut_nb(xy_df = data.frame( x = c(\"Llanelli\", \"Swansea West\"), y = c(\"Bridgend\", \"Vale Of Glamorgan\"))) #> Simple feature collection with 632 features and 9 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5513.182 ymin: 7057.949 xmax: 655655.4 ymax: 1218620 #> Projected CRS: OSGB36 / British National Grid #> First 10 features: #>    degree_educated health_not_good      white  con_swing population #> 1      -1.21794372       2.4694480  0.6393329  8.5917223      66133 #> 2       0.04609836       0.5666903  0.6561204  2.2040312      56415 #> 3       0.26593462      -0.8699365  0.1441816  7.1285493      99654 #> 4       1.62837520      -1.7731408  0.3038995  2.9732599      93197 #> 5      -1.35386780       0.8155333  0.6963927 -0.2362672      85845 #> 6      -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 #> 7      -0.74760203       0.8047040  0.3409127  7.4304029      76974 #> 8       1.63438559      -1.1613230  0.1605045 -0.4813182      96591 #> 9      -0.65926781      -0.1982048  0.6815335  5.6002269      82505 #> 10     -0.96445730       0.9975218  0.6930268  9.4698002      87883 #>           region             county        constituency_name #> 1          Wales     West Glamorgan                 Aberavon #> 2          Wales              Clwyd                Aberconwy #> 3       Scotland           Scotland           Aberdeen North #> 4       Scotland           Scotland           Aberdeen South #> 5       Scotland           Scotland       Airdrie and Shotts #> 6     South East          Hampshire                Aldershot #> 7  West Midlands      West Midlands      Aldridge-Brownhills #> 8     North West Greater Manchester Altrincham and Sale West #> 9          Wales              Clwyd         Alyn and Deeside #> 10 East Midlands         Derbyshire             Amber Valley #>                                       nb                       geometry #> 1            80, 157, 371, 419, 451, 547 POLYGON ((290786.3 202886.7... #> 2                           12, 141, 181 POLYGON ((283209.3 381440.5... #> 3                            4, 239, 595 MULTIPOLYGON (((395379.7 80... #> 4                                 3, 595 POLYGON ((396214 805849.7, ... #> 5           142, 156, 309, 327, 332, 369 POLYGON ((290854.4 662154.9... #> 6                      70, 395, 517, 544 POLYGON ((485408.1 159918.6... #> 7  49, 106, 325, 509, 546, 549, 577, 578 POLYGON ((406519.5 305056.1... #> 8                540, 550, 583, 584, 628 POLYGON ((379104.1 393145.7... #> 9           136, 140, 141, 162, 205, 624 POLYGON ((331643.4 372873.5... #> 10             15, 61, 93, 165, 212, 352 POLYGON ((444868.5 353960.2..."},{"path":"https://horankev.github.io/sfislands/reference/st_force_join_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Enforce contiguity between pairs of areas — st_force_join_nb","title":"Enforce contiguity between pairs of areas — st_force_join_nb","text":"Enforce contiguity pairs areas","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_force_join_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enforce contiguity between pairs of areas — st_force_join_nb","text":"","code":"st_force_join_nb(nb, x = NULL, y = NULL, xy_df = NULL)"},{"path":"https://horankev.github.io/sfislands/reference/st_force_join_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enforce contiguity between pairs of areas — st_force_join_nb","text":"nb neighbourhood `\"list\"` `\"matrix\"`, `sf` dataframe neighbourhood column called `\"nb\"`. x name number first area (optional `xy_df` provided). y name number second area (optional `xy_df` provided). xy_df (optional) dataframe two columns: `x` `y`, containing names numbers areas join.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_force_join_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enforce contiguity between pairs of areas — st_force_join_nb","text":"amended neighbourhood `\"list\"`, `\"matrix\"`, `sf` dataframe neighbourhood column called `\"nb\"`.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_force_join_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enforce contiguity between pairs of areas — st_force_join_nb","text":"","code":"# For individual x and y st_bridges(uk_election,\"constituency_name\") |> st_force_join_nb(x = \"Gower\", y = \"Bridgend\") #> Simple feature collection with 632 features and 9 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5513.182 ymin: 7057.949 xmax: 655655.4 ymax: 1218620 #> Projected CRS: OSGB36 / British National Grid #> First 10 features: #>    degree_educated health_not_good      white  con_swing population #> 1      -1.21794372       2.4694480  0.6393329  8.5917223      66133 #> 2       0.04609836       0.5666903  0.6561204  2.2040312      56415 #> 3       0.26593462      -0.8699365  0.1441816  7.1285493      99654 #> 4       1.62837520      -1.7731408  0.3038995  2.9732599      93197 #> 5      -1.35386780       0.8155333  0.6963927 -0.2362672      85845 #> 6      -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 #> 7      -0.74760203       0.8047040  0.3409127  7.4304029      76974 #> 8       1.63438559      -1.1613230  0.1605045 -0.4813182      96591 #> 9      -0.65926781      -0.1982048  0.6815335  5.6002269      82505 #> 10     -0.96445730       0.9975218  0.6930268  9.4698002      87883 #>           region             county        constituency_name #> 1          Wales     West Glamorgan                 Aberavon #> 2          Wales              Clwyd                Aberconwy #> 3       Scotland           Scotland           Aberdeen North #> 4       Scotland           Scotland           Aberdeen South #> 5       Scotland           Scotland       Airdrie and Shotts #> 6     South East          Hampshire                Aldershot #> 7  West Midlands      West Midlands      Aldridge-Brownhills #> 8     North West Greater Manchester Altrincham and Sale West #> 9          Wales              Clwyd         Alyn and Deeside #> 10 East Midlands         Derbyshire             Amber Valley #>                                       nb                       geometry #> 1            80, 157, 371, 419, 451, 547 POLYGON ((290786.3 202886.7... #> 2                           12, 141, 181 POLYGON ((283209.3 381440.5... #> 3                            4, 239, 595 MULTIPOLYGON (((395379.7 80... #> 4                                 3, 595 POLYGON ((396214 805849.7, ... #> 5           142, 156, 309, 327, 332, 369 POLYGON ((290854.4 662154.9... #> 6                      70, 395, 517, 544 POLYGON ((485408.1 159918.6... #> 7  49, 106, 325, 509, 546, 549, 577, 578 POLYGON ((406519.5 305056.1... #> 8                540, 550, 583, 584, 628 POLYGON ((379104.1 393145.7... #> 9           136, 140, 141, 162, 205, 624 POLYGON ((331643.4 372873.5... #> 10             15, 61, 93, 165, 212, 352 POLYGON ((444868.5 353960.2...  # For multiple x and y pairse\") |> st_bridges(uk_election,\"constituency_name\") |> st_force_join_nb(xy_df = data.frame( x = c(\"Gower\", \"Llanelli\"), y = c(\"Bridgend\", \"Vale Of Glamorgan\"))) #> Simple feature collection with 632 features and 9 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5513.182 ymin: 7057.949 xmax: 655655.4 ymax: 1218620 #> Projected CRS: OSGB36 / British National Grid #> First 10 features: #>    degree_educated health_not_good      white  con_swing population #> 1      -1.21794372       2.4694480  0.6393329  8.5917223      66133 #> 2       0.04609836       0.5666903  0.6561204  2.2040312      56415 #> 3       0.26593462      -0.8699365  0.1441816  7.1285493      99654 #> 4       1.62837520      -1.7731408  0.3038995  2.9732599      93197 #> 5      -1.35386780       0.8155333  0.6963927 -0.2362672      85845 #> 6      -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 #> 7      -0.74760203       0.8047040  0.3409127  7.4304029      76974 #> 8       1.63438559      -1.1613230  0.1605045 -0.4813182      96591 #> 9      -0.65926781      -0.1982048  0.6815335  5.6002269      82505 #> 10     -0.96445730       0.9975218  0.6930268  9.4698002      87883 #>           region             county        constituency_name #> 1          Wales     West Glamorgan                 Aberavon #> 2          Wales              Clwyd                Aberconwy #> 3       Scotland           Scotland           Aberdeen North #> 4       Scotland           Scotland           Aberdeen South #> 5       Scotland           Scotland       Airdrie and Shotts #> 6     South East          Hampshire                Aldershot #> 7  West Midlands      West Midlands      Aldridge-Brownhills #> 8     North West Greater Manchester Altrincham and Sale West #> 9          Wales              Clwyd         Alyn and Deeside #> 10 East Midlands         Derbyshire             Amber Valley #>                                       nb                       geometry #> 1            80, 157, 371, 419, 451, 547 POLYGON ((290786.3 202886.7... #> 2                           12, 141, 181 POLYGON ((283209.3 381440.5... #> 3                            4, 239, 595 MULTIPOLYGON (((395379.7 80... #> 4                                 3, 595 POLYGON ((396214 805849.7, ... #> 5           142, 156, 309, 327, 332, 369 POLYGON ((290854.4 662154.9... #> 6                      70, 395, 517, 544 POLYGON ((485408.1 159918.6... #> 7  49, 106, 325, 509, 546, 549, 577, 578 POLYGON ((406519.5 305056.1... #> 8                540, 550, 583, 584, 628 POLYGON ((379104.1 393145.7... #> 9           136, 140, 141, 162, 205, 624 POLYGON ((331643.4 372873.5... #> 10             15, 61, 93, 165, 212, 352 POLYGON ((444868.5 353960.2..."},{"path":"https://horankev.github.io/sfislands/reference/st_manual_cut_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual remove contiguity between two areas — st_manual_cut_nb","title":"Manual remove contiguity between two areas — st_manual_cut_nb","text":"Manual remove contiguity two areas","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_manual_cut_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual remove contiguity between two areas — st_manual_cut_nb","text":"","code":"st_manual_cut_nb(nb, x, y)"},{"path":"https://horankev.github.io/sfislands/reference/st_manual_cut_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual remove contiguity between two areas — st_manual_cut_nb","text":"nb neighbourhood `\"list\"` `\"matrix\"`, `sf` dataframe neighbourhood column called `\"nb\"`. x name number first area. y name number second area.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_manual_cut_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual remove contiguity between two areas — st_manual_cut_nb","text":"amended neighbourhood `\"list\"`, `\"matrix\"`, `sf` dataframe neighbourhood column called `\"nb\"`.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_manual_cut_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manual remove contiguity between two areas — st_manual_cut_nb","text":"","code":"st_bridges(uk_election,\"constituency_name\") |> st_manual_cut_nb(\"Ynys Mon\",\"Arfon\") |> st_manual_cut_nb(292,378) #> Warning: `st_manual_cut_nb()` was deprecated in sfislands 1.1.0. #> ℹ Please use `st_force_cut_nb()` instead. #> Simple feature collection with 632 features and 9 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5513.182 ymin: 7057.949 xmax: 655655.4 ymax: 1218620 #> Projected CRS: OSGB36 / British National Grid #> First 10 features: #>    degree_educated health_not_good      white  con_swing population #> 1      -1.21794372       2.4694480  0.6393329  8.5917223      66133 #> 2       0.04609836       0.5666903  0.6561204  2.2040312      56415 #> 3       0.26593462      -0.8699365  0.1441816  7.1285493      99654 #> 4       1.62837520      -1.7731408  0.3038995  2.9732599      93197 #> 5      -1.35386780       0.8155333  0.6963927 -0.2362672      85845 #> 6      -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 #> 7      -0.74760203       0.8047040  0.3409127  7.4304029      76974 #> 8       1.63438559      -1.1613230  0.1605045 -0.4813182      96591 #> 9      -0.65926781      -0.1982048  0.6815335  5.6002269      82505 #> 10     -0.96445730       0.9975218  0.6930268  9.4698002      87883 #>           region             county        constituency_name #> 1          Wales     West Glamorgan                 Aberavon #> 2          Wales              Clwyd                Aberconwy #> 3       Scotland           Scotland           Aberdeen North #> 4       Scotland           Scotland           Aberdeen South #> 5       Scotland           Scotland       Airdrie and Shotts #> 6     South East          Hampshire                Aldershot #> 7  West Midlands      West Midlands      Aldridge-Brownhills #> 8     North West Greater Manchester Altrincham and Sale West #> 9          Wales              Clwyd         Alyn and Deeside #> 10 East Midlands         Derbyshire             Amber Valley #>                                       nb                       geometry #> 1            80, 157, 371, 419, 451, 547 POLYGON ((290786.3 202886.7... #> 2                           12, 141, 181 POLYGON ((283209.3 381440.5... #> 3                            4, 239, 595 MULTIPOLYGON (((395379.7 80... #> 4                                 3, 595 POLYGON ((396214 805849.7, ... #> 5           142, 156, 309, 327, 332, 369 POLYGON ((290854.4 662154.9... #> 6                      70, 395, 517, 544 POLYGON ((485408.1 159918.6... #> 7  49, 106, 325, 509, 546, 549, 577, 578 POLYGON ((406519.5 305056.1... #> 8                540, 550, 583, 584, 628 POLYGON ((379104.1 393145.7... #> 9           136, 140, 141, 162, 205, 624 POLYGON ((331643.4 372873.5... #> 10             15, 61, 93, 165, 212, 352 POLYGON ((444868.5 353960.2..."},{"path":"https://horankev.github.io/sfislands/reference/st_manual_join_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually enforce contiguity between two areas — st_manual_join_nb","title":"Manually enforce contiguity between two areas — st_manual_join_nb","text":"Manually enforce contiguity two areas","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_manual_join_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually enforce contiguity between two areas — st_manual_join_nb","text":"","code":"st_manual_join_nb(nb, x, y)"},{"path":"https://horankev.github.io/sfislands/reference/st_manual_join_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually enforce contiguity between two areas — st_manual_join_nb","text":"nb neighbourhood `\"list\"` `\"matrix\"`, `sf` dataframe neighbourhood column called `\"nb\"`. x name number first area. y name number second area.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_manual_join_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually enforce contiguity between two areas — st_manual_join_nb","text":"amended neighbourhood `\"list\"`, `\"matrix\"`, `sf` dataframe neighbourhood column called `\"nb\"`.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_manual_join_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually enforce contiguity between two areas — st_manual_join_nb","text":"","code":"st_bridges(uk_election,\"constituency_name\") |> st_manual_join_nb(\"Gower\",\"St Ives\") #> Warning: `st_manual_join_nb()` was deprecated in sfislands 1.1.0. #> ℹ Please use `st_force_join_nb()` instead. #> Simple feature collection with 632 features and 9 fields #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 5513.182 ymin: 7057.949 xmax: 655655.4 ymax: 1218620 #> Projected CRS: OSGB36 / British National Grid #> First 10 features: #>    degree_educated health_not_good      white  con_swing population #> 1      -1.21794372       2.4694480  0.6393329  8.5917223      66133 #> 2       0.04609836       0.5666903  0.6561204  2.2040312      56415 #> 3       0.26593462      -0.8699365  0.1441816  7.1285493      99654 #> 4       1.62837520      -1.7731408  0.3038995  2.9732599      93197 #> 5      -1.35386780       0.8155333  0.6963927 -0.2362672      85845 #> 6      -0.21109416      -1.3619136 -0.1675498  5.6993250     103922 #> 7      -0.74760203       0.8047040  0.3409127  7.4304029      76974 #> 8       1.63438559      -1.1613230  0.1605045 -0.4813182      96591 #> 9      -0.65926781      -0.1982048  0.6815335  5.6002269      82505 #> 10     -0.96445730       0.9975218  0.6930268  9.4698002      87883 #>           region             county        constituency_name #> 1          Wales     West Glamorgan                 Aberavon #> 2          Wales              Clwyd                Aberconwy #> 3       Scotland           Scotland           Aberdeen North #> 4       Scotland           Scotland           Aberdeen South #> 5       Scotland           Scotland       Airdrie and Shotts #> 6     South East          Hampshire                Aldershot #> 7  West Midlands      West Midlands      Aldridge-Brownhills #> 8     North West Greater Manchester Altrincham and Sale West #> 9          Wales              Clwyd         Alyn and Deeside #> 10 East Midlands         Derbyshire             Amber Valley #>                                       nb                       geometry #> 1            80, 157, 371, 419, 451, 547 POLYGON ((290786.3 202886.7... #> 2                           12, 141, 181 POLYGON ((283209.3 381440.5... #> 3                            4, 239, 595 MULTIPOLYGON (((395379.7 80... #> 4                                 3, 595 POLYGON ((396214 805849.7, ... #> 5           142, 156, 309, 327, 332, 369 POLYGON ((290854.4 662154.9... #> 6                      70, 395, 517, 544 POLYGON ((485408.1 159918.6... #> 7  49, 106, 325, 509, 546, 549, 577, 578 POLYGON ((406519.5 305056.1... #> 8                540, 550, 583, 584, 628 POLYGON ((379104.1 393145.7... #> 9           136, 140, 141, 162, 205, 624 POLYGON ((331643.4 372873.5... #> 10             15, 61, 93, 165, 212, 352 POLYGON ((444868.5 353960.2..."},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise a neighbourhood structure on a map — st_quickmap_nb","title":"Visualise a neighbourhood structure on a map — st_quickmap_nb","text":"Visualise neighbourhood structure map","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise a neighbourhood structure on a map — st_quickmap_nb","text":"","code":"st_quickmap_nb(   nbsf,   linkcol = \"dodgerblue\",   bordercol = \"gray7\",   pointcol = \"darkred\",   fillcol = \"gray95\",   linksize = 0.2,   bordersize = 0.1,   pointsize = 0.8,   title = NULL,   subtitle = NULL,   nodes = \"point\",   numericsize = 5,   numericcol = \"black\",   concavehull = FALSE,   hullratio = 0.8,   hullcol = \"darkgreen\",   hullsize = 0.5 )"},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise a neighbourhood structure on a map — st_quickmap_nb","text":"nbsf `sf` dataframe neighbourhood column called \"nb\", output `st_bridges()` linkcol colour lines connecting neighbours. bordercol colour boundary lines areas. pointcol colour centroid points nodes `\"point\"`. fillcol fill areas. linksize linewidth lines connecting neighbours. bordersize linewidth borders areas. pointsize size centroid points nodes `\"point\"`. title plot title. subtitle plot subtitle. nodes default `\"point\"`. Can also `\"numeric\"`. numericsize font size nodes `\"numeric\"`. numericcol font colour nodes `\"numeric\"`. concavehull default `FALSE`. Whether show concave hulls. hullratio value 0 1. 1 returns convex hulls, 0 maximally concave hulls. hullcol colour concave hull lines. hullsize line width concave hull lines.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise a neighbourhood structure on a map — st_quickmap_nb","text":"`ggplot` showing areas neighbourhood structure.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise a neighbourhood structure on a map — st_quickmap_nb","text":"","code":"st_bridges(uk_election,\"constituency_name\") |> st_quickmap_nb()"},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_preds.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise the predictions generated by the `st_augment()` function — st_quickmap_preds","title":"Visualise the predictions generated by the `st_augment()` function — st_quickmap_preds","text":"Visualise predictions generated `st_augment()` function","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_preds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise the predictions generated by the `st_augment()` function — st_quickmap_preds","text":"","code":"st_quickmap_preds(   output,   scale_low = \"firebrick4\",   scale_mid = \"white\",   scale_high = \"darkblue\",   scale_midpoint = 0,   borderwidth = 0.05,   bordercol = \"black\",   legendlimits = \"individual\",   titlesize = 12,   subtitlesize = 10,   framefill = \"white\",   frameline = \"black\",   framesize = 1 )"},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_preds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise the predictions generated by the `st_augment()` function — st_quickmap_preds","text":"output augmented `sf` dataframe produced `st_augment()`. scale_low fill lowest extreme scale. scale_mid fill midpoint scale. scale_high fill highest extreme scale. scale_midpoint value midpoint scale. borderwidth linewidth borders units. bordercol colour borders units. legendlimits default `\"individual\"`. legend plot scaled within limits. `\"minmax\"` means plot common legend limits according global min-max. titlesize font size title. subtitlesize font size subtitle. framefill colour background fill. frameline colour frame. framesize line width frame.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_preds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise the predictions generated by the `st_augment()` function — st_quickmap_preds","text":"list ggplots.","code":""},{"path":"https://horankev.github.io/sfislands/reference/st_quickmap_preds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise the predictions generated by the `st_augment()` function — st_quickmap_preds","text":"","code":"prepdata <- st_bridges(uk_election,\"constituency_name\") mgcv::gam(health_not_good ~   s(constituency_name, bs='mrf', xt=list(nb=prepdata$nb), k=100), data=prepdata, method=\"REML\") |> st_augment(uk_election) |> st_quickmap_preds() #> [[1]]  #>"},{"path":"https://horankev.github.io/sfislands/reference/uk_election.html","id":null,"dir":"Reference","previous_headings":"","what":"UK election data — uk_election","title":"UK election data — uk_election","text":"Swing socio-economic data England, Scotland & Wales Census voting data sourced parlitools R package Spatial data sourced UK government geoportal","code":""},{"path":"https://horankev.github.io/sfislands/reference/uk_election.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UK election data — uk_election","text":"","code":"uk_election"},{"path":"https://horankev.github.io/sfislands/reference/uk_election.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UK election data — uk_election","text":"## `uk_election`    sf data.frame object 632 rows 9 columns degree_educated Percentage constituency population level 4 qualifications higher, scaled mean 0 standard deviation 1 health_not_good Percentage constituency population reporting health fair, bad, bad, scaled mean 0 standard deviation 1 white Percentage constituency population exclusively white ethnicity, scaled mean 0 standard deviation 1 con_swing Butler swing Conservative Party Labour Party election 2019 election 2019 population Constituency population region Regions county Counties constituency_name Westminster parliamentary constituencies, 2019 geometry sfc polygons column","code":""},{"path":"https://horankev.github.io/sfislands/reference/uk_election.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"UK election data — uk_election","text":"<https://geoportal.statistics.gov.uk/datasets/ons::wpc-dec-2019-ultra-generalised-clipped-boundaries-uk>, <https://docs.evanodell.com/parlitools/>","code":""},{"path":[]},{"path":"https://horankev.github.io/sfislands/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"sfislands 1.1.0","text":"functions st_manual_cut_nb st_manual_join_nb deprecated replaced intuitively named st_force_cut_nb st_force_join_nb. new st_force_cut_nb() st_force_join_nb() functions work similarly predecessors, now include new argument xy_df. allows multiple cuts joins applied single function call, improving performance usability. xy_df argument data frame containing two columns, x y, representing pairs units cut joined. st_bridges(), argument geom_col_name deprecated favour clearer row_identifier. purely naming change — functionality remains .","code":""},{"path":"https://horankev.github.io/sfislands/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"sfislands 1.1.0","text":"Several spurious warnings messages appeared version 1.0 resolved.","code":""},{"path":"https://horankev.github.io/sfislands/news/index.html","id":"other-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Other Improvements","title":"sfislands 1.1.0","text":"Error messages reviewed improved better clarity consistency.","code":""},{"path":"https://horankev.github.io/sfislands/news/index.html","id":"sfislands-100","dir":"Changelog","previous_headings":"","what":"sfislands 1.0.0","title":"sfislands 1.0.0","text":"CRAN release: 2024-03-21 Initial CRAN release.","code":""},{"path":"https://horankev.github.io/sfislands/news/index.html","id":"sfislands-010","dir":"Changelog","previous_headings":"","what":"sfislands 0.1.0","title":"sfislands 0.1.0","text":"Initial development release.","code":""}]
